#include<stdio.h> #include <stdlib.h> #include<time.h>
#define 학습율 0.02
int aim_cl[4423][500] = {}, cl_loc[20][2] ,endpoint=10; double rawdata[4423][500], clust[20] = {};
char titles[501][55] = {
"Unfinished_portrait_of_Franklin_D._Roosevelt"
,	"Negan"
,	"Cam_Newton"
,	"Beyonce"
,	"Coachella_Valley_Music_and_Arts_Festival"
,	"Charlie_Sheen"
,	"Keanu_Reeves"
,	"Crimson_Peak"
,	"Lisa_Brennan-Jobs"
,	"Rodrigo_Duterte"
,	"Conor_McGregor"
,	"The_Life_of_Pablo"
,	"Memorial_Day"
,	"Veterans_Day"
,	"Labor_Day"
,	"UEFA_Euro_2016"
,	"Ides_of_March"
,	"Pat_Bowlen"
,	"The_Martian_(film)"
,	"David_Bowie"
,	"Hanukkah"
,	"2016_ICC_World_Twenty20"
,	"Whitey_Bulger"
,	"Chris_Stapleton"
,	"House_of_Cards_(season_4)"
,	"Ted_Cruz"
,	"Clara_Rockmore"
,	"Flip_Saunders"
,	"Channing_Tatum"
,	"Meldonium"
,	"Fear_the_Walking_Dead"
,	"Terry_Wogan"
,	"Negasonic_Teenage_Warhead"
,	"Leap_year"
,	"Good_Friday"
,	"Mahatma_Gandhi"
,	"Michael_J._Fox"
,	"Lupe_Fuentes"
,	"Lucy_(Australopithecus)"
,	"Von_Miller"
,	"Blac_Chyna"
,	"Prince_(musician)"
,	"The_Walk_(2015_film)"
,	"Tami_Erin"
,	"Back_to_the_Future_II"
,	"Zika_virus"
,	"Doom_(2016_video_game)"
,	"Preacher_(comics)"
,	"Fan_(film)"
,	"Daniel_Craig"
,	"Democratic_Party_presidential_primaries,_2016"
,	"2015_Rugby_World_Cup"
,	"Vanity_(singer)"
,	"B._K._S._Iyengar"
,	"Claude_Shannon"
,	"Natalie_Cole"
,	"Cedric_Villani"
,	"Rai_stones"
,	"Hillsborough_disaster"
,	"Groundhog_Day"
,	"Novak_Djokovic"
,	"Spotlight_(film)"
,	"Purple_Rain_(film)"
,	"2016_NCAA_Men's_Division_I_Basketball_Tournament"
,	"Dr._Luke"
,	"Kobe_Bryant"
,	"Jurgen_Klopp"
,	"Sri_Srinivasan"
,	"Joy_Mangano"
,	"November_2015_Paris_attacks"
,	"1896_Summer_Olympics"
,	"Verghese_Kurien"
,	"Hamilton_(musical)"
,	"Blackstar_(David_Bowie_album)"
,	"Roger_Federer"
,	"Joe_Frazier"
,	"Glenn_Frey"
,	"Robert_Hanssen"
,	"House_of_Cards_(U.S._TV_series)"
,	"Doctor_Strange"
,	"Jessica_Jones_(TV_series)"
,	"Seventh-day_Adventist_Church"
,	"William_Shakespeare"
,	"Star_Wars_Episode_I:_The_Phantom_Menace"
,	"Eagles_(band)"
,	"Laila_Ali"
,	"2016_in_film"
,	"The_Walking_Dead_(season_6)"
,	"Drake_(rapper)"
,	"Emilia_Clarke"
,	"Singh_Is_Bliing"
,	"Syrian_Civil_War"
,	"Survivor_Series_(2015)"
,	"10_Cloverfield_Lane"
,	"Spectre_(2015_film)"
,	"Marco_Rubio"
,	"A_Moon_Shaped_Pool"
,	"Andrew_Jackson"
,	"Making_a_Murderer"
,	"Anonymous_(group)"
,	"Lemonade_(Beyonce_album)"
,	"Elizabeth_II"
,	"58th_Annual_Grammy_Awards"
,	"Coldplay"
,	"Samburu_people"
,	"Angie_Bowie"
,	"Martin_Luther_King,_Jr."
,	"Johnny_Depp"
,	"Hate_Story_3"
,	"Annie_Besant"
,	"Salford_City_F.C."
,	"Anne_Frank"
,	"Yom_Kippur"
,	"2015_San_Bernardino_shooting"
,	"Leicester_City_F._C."
,	"Chinese_New_Year"
,	"Supersonic_Low_Altitude_Missile"
,	"Omayra_Sanchez"
,	"Canadian_federal_election,_2015"
,	"Floyd_Mayweather,_Jr."
,	"Philippe_Petit"
,	"Matt_Hasselbeck"
,	"Henry_Cavill"
,	"Mohammad_Azharuddin"
,	"Syria"
,	"John_Boehner"
,	"Rosh_Hashanah"
,	"Super_Bowl"
,	"Sukhoi_Su-24"
,	"Black_Friday_(shopping)"
,	"Hillary_Clinton"
,	"Ronald_Reagan"
,	"Antonin_Scalia"
,	"Dmitri_Mendeleev"
,	"73rd Golden Globe Awards"
,	"Patty_Duke"
,	"Bajirao_I"
,	"Royal_Rumble_(2016)"
,	"Valentine's_Day"
,	"Claudio_Ranieri"
,	"X-Men_(film_series)"
,	"Harriet_Tubman"
,	"Jose_Mourinho"
,	"Billy_the_Kid"
,	"Danny_Willett"
,	"Black_hole"
,	"Rob_Ford"
,	"Brussels"
,	"Jacklyn_H._Lucas"
,	"Eazy-E"
,	"Purple_Man"
,	"Jackie_Robinson"
,	"American_Horror_Story"
,	"Ash_Wednesday"
,	"Virat_Kohli"
,	"Nancy_Reagan"
,	"M._F._Husain"
,	"Bernard_Madoff"
,	"Elektra_(comics)"
,	"Mario_Miranda"
,	"Blood_Moon_Prophecy"
,	"Halo_5:_Guardians"
,	"Adam_Driver"
,	"Suicide_Squad_(film)"
,	"Diwali"
,	"Punisher"
,	"Eid_al-Adha"
,	"Fort_McMurray"
,	"Phife_Dawg"
,	"Marvel_Cinematic_Universe"
,	"B._R._Ambedkar"
,	"John_Anglin_(criminal)"
,	"Return_of_the_Jedi"
,	"Jordan_Spieth"
,	"Ron_Reagan"
,	"Academy_Awards"
,	"Quantico_(TV_series)"
,	"Holi"
,	"TLC:_Tables,_Ladders_&_Chairs_(2015)"
,	"Rod_Serling"
,	"Patti_Davis"
,	"Neerja_Bhanot"
,	"Sylvester_Stallone"
,	"Krampus"
,	"Sigmund_Freud"
,	"Carolina_Panthers"
,	"Pablo_Escobar"
,	"The_Man_in_the_High_Castle_(TV_series)"
,	"Ben_Carson"
,	"Mali"
,	"Trans-Pacific_Partnership"
,	"Master_of_None"
,	"Miss_Universe"
,	"Martin_Luther_King,_Jr._Day"
,	"Attack_on_Pearl_Harbor"
,	"A._P._J._Abdul_Kalam"
,	"Star_Wars_sequel_trilogy"
,	"Bob_Ross"
,	"Gloria_Vanderbilt"
,	"Lemmy"
,	"Dolly_Parton"
,	"Jose_Aldo"
,	"O._J._Simpson"
,	"Cinco_de_Mayo"
,	"Super_Tuesday"
,	"Kanye_West"
,	"Mother's_Day"
,	"Daisy_Ridley"
,	"The_Ultimate_Fighter:_Team_McGregor_vs._Team_Faber"
,	"April_Ludgate"
,	"Belgium"
,	"Nusrat_Fateh_Ali_Khan"
,	"Serena_Williams"
,	"Rockbitch"
,	"Descendants_of_the_Sun"
,	"Black_Panther_(comics)"
,	"Jodie_Sweetin"
,	"Crypt_of_Civilization"
,	"Jim_Webb"
,	"Supergirl_(U.S._TV_series)"
,	"Payback_(2016)"
,	"Easy-E"
,	"Donald_Trump"
,	"Gennady_Golovkin"
,	"Duncan_Jones"
,	"Remembrance_Day"
,	"Powerball"
,	"Dilwale_(2015_film)"
,	"Mastani"
,	"Heroes_Reborn_(miniseries)"
,	"Adele"
,	"Karan_Singh_Grover"
,	"Grease:_Live"
,	"Tamasha_(film)"
,	"Johan_Cruyff"
,	"Michael_Jordan"
,	"Lunar_eclipse"
,	"Christina_Grimmie"
,	"Ronda_Rousey"
,	"Andre_the_Giant"
,	"Azhar_(film)"
,	"Space_Shuttle_Challenger_disaster"
,	"Krampus_(film)"
,	"Jeffrey_Dean_Morgan"
,	"Prem_Ratan_Dhan_Payo"
,	"April_Fools'_Day"
,	"Call_of_Duty:_Black_Ops_III"
,	"Ryan_Reynolds"
,	"Alicia_Vikander"
,	"Views_(album)"
,	"Wladimir_Klitschko"
,	"Shane_McMahon"
,	"Islamic_State_of_Iraq_and_the_Levant"
,	"Google"
,	"Fuller_House_(TV_series)"
,	"Saint_Patrick's_Day"
,	"Eagles_of_Death_Metal"
,	"Uncharted_4:_A_Thief's_End"
,	"Alexander_Hamilton"
,	"George_Boole"
,	"Philippine_presidential_election,_2016"
,	"O._J._Simpson_murder_case"
,	"Deadpool"
,	"Stephen_Harper"
,	"International_Women's_Day"
,	"Fastlane_(2016)"
,	"Jenna_Dewan"
,	"Anti_(album)"
,	"Elizabeth_Olsen"
,	"Robert_Kardashian"
,	"A._J._Styles"
,	"Victoria_Woodhull"
,	"Iowa_caucuses"
,	"Zootopia"
,	"Abu_Bakr_al-Baghdadi"
,	"Yogi_Berra"
,	"Fool's_Gold_Loaf"
,	"Saul_Alvarez"
,	"Creed_(film)"
,	"Deadpool_(film)"
,	"Celine_Dion"
,	"Hertha_Marks_Ayrton"
,	"2012_Benghazi_attack"
,	"Ethan_Couch"
,	"United_States"
,	"Thanksgiving"
,	"Victoria_Wood"
,	"Genie_(feral_child)"
,	"Holly_Holm"
,	"Denver_Broncos"
,	"Eurovision_Song_Contest_2016"
,	"Steve_Jobs"
,	"Bluetooth"
,	"Stacey_Dash"
,	"Goran_Kropp"
,	"Nate_Diaz"
,	"Rogue_One"
,	"Gotham_(TV_series)"
,	"American_Crime_Story"
,	"The_Jungle_Book_(2016_film)"
,	"Frederick_Douglass"
,	"Captain_America:_Civil_War"
,	"Christopher_Columbus"
,	"Tom_Brady"
,	"Krysten_Ritter"
,	"Fallout_4"
,	"George_Hotz"
,	"Republican_Party_presidential_primaries,_2016"
,	"Bernie_Sanders"
,	"Carly_Fiorina"
,	"Lady_Colin_Campbell"
,	"2016_Brussels_bombings"
,	"Sadiq_Khan"
,	"Garry_Shandling"
,	"Mayte_Garcia"
,	"Batman_v_Superman:_Dawn_of_Justice"
,	"2015_FIBA_Asia_Championship"
,	"Jonah_Lomu"
,	"Christopher_Lloyd"
,	"Affluenza"
,	"Star_Wars"
,	"Zaha_Hadid"
,	"UEFA_Euro_2016_qualifying"
,	"88th_Academy_Awards"
,	"Extreme_Rules_(2016)"
,	"Mary_Fields"
,	"Alan_Rickman"
,	"Caroline_Herschel"
,	"Luke_Cage"
,	"Jackie_Collins"
,	"2008_Noida_double_murder_case"
,	"Charles_Perrault"
,	"September_11_attacks"
,	"Hugh_Glass"
,	"Joy_(film)"
,	"Game_of_Thrones_(season_6)"
,	"Bajirao_Mastani_(film)"
,	"Day_of_the_Dead"
,	"Narcos"
,	"Mark_Hamill"
,	"Daredevil_(TV_series)"
,	"Gwen_Stefani"
,	"Iman_(model)"
,	"Halloween"
,	"Adolphe_Sax"
,	"Margaret_Trudeau"
,	"Abe_Vigoda"
,	"The_Revenant_(2015_film)"
,	"Malcolm_Turnbull"
,	"The_Conjuring_2"
,	"Airlift_(film)"
,	"Fidel_Castro"
,	"Easter"
,	"Black_Panther_Party"
,	"Pierre_Trudeau"
,	"Carol_Burnett"
,	"Kimbo_Slice"
,	"Fargo_(TV_series)"
,	"25_(Adele_album)"
,	"The_Walking_Dead_(TV_series)"
,	"Lamar_Odom"
,	"Lucy_Maud_Montgomery"
,	"Dimitri_Payet"
,	"Stephen_Curry"
,	"Room_(2015_film)"
,	"Hedy_Lamarr"
,	"Panama_Papers"
,	"Corrupted_Blood_incident"
,	"Daredevil_(season_2)"
,	"Christopher_Paul_Neil"
,	"Saint_Patrick"
,	"Great_white_shark"
,	"Ecole_Polytechnique_massacre"
,	"Warcraft_(film)"
,	"Ramadan"
,	"Gal_Gadot"
,	"Scott_Weiland"
,	"Purpose_(Justin_Bieber_album)"
,	"Earth_Day"
,	"Goliath"
,	"Dave_Mirra"
,	"Daylight_Saving_Time"
,	"Harrison_Ford"
,	"Hello_(Adele_song)"
,	"David_Bowie_discography"
,	"Joaquin_Guzman"
,	"Tyson_Fury"
,	"Doris_Roberts"
,	"Motorhead"
,	"Hell_in_a_Cell_(2015)"
,	"Star_Wars_(film)"
,	"Ronnie_Corbett"
,	"Will_Smith_(defensive_end)"
,	"Jane_Jacobs"
,	"Martin_Shkreli"
,	"Sian_Blake"
,	"Pia_Wurtzbach"
,	"Rachel_Roy"
,	"Game_of_Thrones"
,	"2016_UEFA_Champions_League_Final"
,	"Super_Bowl_50"
,	"ICC_World_Twenty20"
,	"Baaghi_(2016_film)"
,	"Sean_Astin"
,	"Theri_(film)"
,	"American_Horror_Story:_Hotel"
,	"Brie_Larson"
,	"Frank_Sinatra,_Jr."
,	"Chernobyl_disaster"
,	"Kate_Winslet"
,	"How_to_Get_Away_with_Murder"
,	"Sherlock_(TV_series)"
,	"Sairat"
,	"Michael_Jackson"
,	"Steven_Avery"
,	"Fred_Thompson"
,	"Moses_Malone"
,	"Kate_Beckinsale"
,	"Starship_Troopers_(film)"
,	"Frankie_Manning"
,	"Overwatch_(video_game)"
,	"Amber_Heard"
,	"Maureen_O'Hara"
,	"Facebook"
,	"Justin_Trudeau"
,	"Ludwig_van_Beethoven"
,	"Rene_Angelil"
,	"Ben_Affleck"
,	"Scream_Queens_(2015_TV_series)"
,	"Call_of_Duty:_Modern_Warfare_2"
,	"Back_to_the_Future"
,	"Pope_Francis"
,	"Morley_Safer"
,	"Yuri_Kochiyama"
,	"Purple_Rain_(album)"
,	"One-Punch_Man"
,	"Monica_Lewinsky"
,	"Puli_(2015_film)"
,	"Everest_(2015_film)"
,	"Ariana_Grande"
,	"Sia_Furler"
,	"The_X-Files"
,	"Guy_Fawkes"
,	"University_of_Texas_at_Dallas"
,	"Merrick_Garland"
,	"H._H._Holmes"
,	"Merle_Haggard"
,	"The_Hateful_Eight"
,	"Wrestlemania_32"
,	"Jessica_Jones"
,	"Maria_Santos_Gorrostieta_Salazar"
,	"Peyton_Manning"
,	"The_Flash_(2014_TV_series)"
,	"Guy_Fawkes_Night"
,	"Boxing_Day"
,	"Rene_Laennec"
,	"Steven_Harvey"
,	"Muhammad_Ali"
,	"Zach_Braff"
,	"Phoebe_Snetsinger"
,	"Mark_Zuckerberg"
,	"Mad_Max:_Fury_Road"
,	"Aokigahara"
,	"Preacher_(TV_series)"
,	"Jeremy_Corbyn"
,	"Mars"
,	"Night_of_Champions_(2015)"
,	"Disappearance_of_Bobby_Dunbar"
,	"Tom_Hardy"
,	"Kylo_Ren"
,	"Kesha"
,	"UFC_199"
,	"Vincent_Margera"
,	"UFC_192"
,	"UFC_193"
,	"UFC_194"
,	"UFC_196"
,	"UFC_197"
,	"J._J._Abrams"
,	"Copa_America_Centenario"
,	"Wonder_Woman"
,	"Melania_Trump"
,	"Chris_Kyle"
,	"Leonardo_DiCaprio"
,	"Amrita_Sher-Gil"
,	"Villanova_University"
,	"Ravi_Shankar"
,	"Eli_Manning"
,	"X-Men:_Apocalypse"
,	"John_Logie_Baird"
,	"The_X-Files_(miniseries)"
,	"Sophie_Gregoire"
,	"The_Shannara_Chronicles"
,	"Cristiano_Ronaldo"
,	"Star_Wars:_The_Force_Awakens"
,	"Lyndon_B._Johnson"
,	"The_Hunger_Games:_Mockingjay_-_Part_2"
,	"Gordie_Howe"
,	"Republic_Day_(India)"
, "Carrie_Fisher" }; void batch(int clnum);
void targeting(int clnum); double move(int clnum);

int main() {
int i,j,rotate=20,clnum=0, decrease_jcl = -1; double total,min_jcl;
scanf("%d", &clnum); freopen("termDocMatrix.txt", "r", stdin); freopen("result.txt", "w", stdout);
for (i = 0; i < 4423; i++) for (j = 0; j < 500; j++)scanf("%lf", &rawdata[i][j]);//입력
for (endpoint = 0; endpoint < 10; endpoint++) { rotate = 20;
min_jcl = 1000;
decrease_jcl = -1; batch(clnum);
for (; rotate; rotate--) {
printf("\n%2d회차", 21 - rotate); targeting(clnum);
total = move(clnum); if (min_jcl > total) {
min_jcl = total; decrease_jcl++;
}
}
printf(" 감소횟수:%d\n", decrease_jcl);
}
}

void batch(int clnum) {
int i; srand((unsigned)time(NULL)); for (i = 0; i < clnum; i++) {
cl_loc[i][0] = rand() % 4423; cl_loc[i][1] = rand() % 500;
}
}

void targeting(int clnum) { int i, j, k, cnt;
unsigned int min, distant;
for (i = 0; i< 4423; i++)for (j = 0; j < 500; j++) if(rawdata[i][j]>0.001){ cnt = 0;
min = 0x0fffffff;
for (k = 0; k < clnum; k++) {
distant = (unsigned int)((i - cl_loc[k][0]) * (i - cl_loc[k][0]) + (j - cl_loc[k][1]) * (j - cl_loc[k][1])); if (distant < min) {
cnt = k;
min = distant;
}
}
aim_cl[i][j] = cnt;
}
}

double move(int clnum) {
int i, j, k,l,tmp,maxcnti[20][5] = {}, maxcntj[20][5] = {};
double way[20][2] = {}, total = 0, max[20][5] = {}; for (i = 0; i < clnum; i++) {
clust[i] = 0;
}
for (i = 0; i < 4423; i++)for (j = 0; j < 500; j++)if (rawdata[i][j] > 0.001) {
clust[aim_cl[i][j]] += (double)rawdata[i][j] * ((i - cl_loc[aim_cl[i][j]][0]) * (i - cl_loc[aim_cl[i][j]][0]) + (j - cl_loc[aim_cl[i][j]][1]) * (j - cl_loc[aim_cl[i][j]][1]));
way[aim_cl[i][j]][0] += (double)학습율 * rawdata[i][j] * (i - cl_loc[aim_cl[i][j]][0]);
way[aim_cl[i][j]][1] += (double)학습율 * (j - cl_loc[aim_cl[i][j]][1]) * rawdata[i][j];
if (rawdata[i][j] > max[aim_cl[i][j]][4]) {
max[aim_cl[i][j]][4] = rawdata[i][j]; maxcnti[aim_cl[i][j]][4] = i;
maxcntj[aim_cl[i][j]][4] = j; for (k = 0; k < 4; k++) {
for (l = k; l < 5; l++)if (max[aim_cl[i][j]][k] < max[aim_cl[i][j]][l]) { tmp = max[aim_cl[i][j]][k];
max[aim_cl[i][j]][k] = max[aim_cl[i][j]][l]; max[aim_cl[i][j]][l] = tmp;
tmp= maxcnti[aim_cl[i][j]][k]; maxcnti[aim_cl[i][j]][k] = maxcnti[aim_cl[i][j]][l]; maxcnti[aim_cl[i][j]][l] =tmp ;
tmp = maxcntj[aim_cl[i][j]][k]; maxcntj[aim_cl[i][j]][k] = maxcntj[aim_cl[i][j]][l]; maxcntj[aim_cl[i][j]][l] = tmp;
}
}
}
}
for (i = 0; i < clnum; i++) {
printf("%d번째 클러스터: %f %s %s %s %s %s\n ", i+1, clust[i] / 2211500, titles + maxcntj[i][0], titles + maxcntj[i][1], titles + maxcntj[i][2], titles + maxcntj[i][3], titles + maxcntj[i][4]);
cl_loc[i][0] += way[i][0]/10;
cl_loc[i][1] += way[i][1]/10; total += clust[i] / 2211500;
}
printf("\n 클러스터링 총합: %.4lf", total); printf("%.4lf ", total);
return total;
}
